ЛАБОРАТОРНА РОБОТА №3. 


 РОЗРОБКА БІЗНЕС-ЛОГІКИ ТА ФУНКЦІЙ АДМІНІСТРУВАННЯ СЕРВЕРНОЇ ЧАСТИНИ ПРОГРАМНОЇ СИСТЕМИ 


Підготував 
ст. Нікітенко Н.Ю 
гр. ПЗПІ-22-6 

Перевірив роботу: 
Сокорчук І.П 


1. Текстовий опис інженерних рішень
Архітектура системи
Система GeoGuard Pro має розподілену архітектуру, що складається з клієнтської та серверної частин:
* Клієнтська частина реалізована за допомогою HTML, CSS, JavaScript із використанням зовнішніх бібліотек (Leaflet, Chart.js, AOS) для побудови інтерактивного інтерфейсу, який відображає інформацію про катастрофи, події, сенсорні дані, а також статистичні графіки.

* Серверна частина побудована на Node.js з використанням фреймворку Express. Вона забезпечує:

   * Отримання, обробку та збереження даних про катастрофи та події із зовнішніх API (USGS, EONET).
   * Роботу з базою даних PostgreSQL (з підтримкою PostGIS для геопросторових операцій), яка містить таблиці для користувачів, катастроф, подій, сенсорів та історичних даних.
   * Аутентифікацію та авторизацію користувачів із застосуванням JWT-токенів.
   * Адміністративні функції, такі як управління ролями користувачів та оновлення налаштувань.
Основні інженерні рішення
   1. Бізнес-логіка обробки даних:

      * Агрегація та фільтрація подій:
 Сервер отримує дані з зовнішніх сервісів (USGS та EONET), перетворює їх у внутрішній формат (визначення типу події, часу, координат, магнітуди для землетрусів) і фільтрує їх за заданим періодом (наприклад, події за останні 3, 7 або 30 днів).
Для цього використовуються функції, що обчислюють часові інтервали, порівнюють дату події з поточним часом і зберігають лише релевантні записи.

      * Геопросторові операції:
 Використання можливостей PostGIS дозволяє виконувати запити для отримання катастроф у певному радіусі від заданих координат. Це забезпечує можливість знаходити події, найближчі до користувача, а також здійснювати аналіз географічного розподілу катастроф.

      * Агрегація статистичних даних:
 Для побудови статистичних графіків дані агрегуються за добами, тижнями чи місяцями. Розрахунок кількості подій певного типу за обраний період – це важлива частина бізнес-логіки.

         2. Адміністрування серверної частини:

            * Управління користувачами:
 Адміністративні маршрути (наприклад, /api/admin/users та /api/admin/user/:id/role) дозволяють отримувати список користувачів та оновлювати їх ролі. Для захисту цих маршрутів використовується middleware, що перевіряє валідність JWT-токенів.

            * Оновлення налаштувань користувачів:
 Функціонал для збереження та оновлення налаштувань (наприклад, порогових значень для сейсмічної активності та рівня води) дозволяє адаптувати систему під вимоги окремого користувача. Оновлення налаштувань здійснюється через API-методи, що працюють із таблицею user_settings у базі даних.

________________


2. Фрагменти програмного коду
2.1 Бізнес логіка серверної частини
Фрагмент з маршруту events.js – обробка подій
Цей фрагмент демонструє отримання даних про землетруси з USGS, фільтрацію за часовим періодом, перетворення даних до внутрішнього формату та збереження їх у базі даних.
// Допоміжна функція: отримання даних про землетруси з USGS
async function fetchEarthquakeEvents(periodDays) {
  let timeRange = 'week';
  if (periodDays > 7) {
    timeRange = 'month';
  }
  const url = `https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/4.5_${timeRange}.geojson`;
  const response = await myFetch(url);
  const data = await response.json();
  const periodStart = Date.now() - (periodDays * 24 * 60 * 60 * 1000);
  const events = data.features.map(feature => {
    return {
      type: 'earthquake',
      title: feature.properties.place,
      magnitude: feature.properties.mag,
      lat: feature.geometry.coordinates[1],
      lng: feature.geometry.coordinates[0],
      event_time: new Date(feature.properties.time),
      source: 'USGS'
    };
  }).filter(event => {
    const time = new Date(event.event_time).getTime();
    return time >= periodStart && time <= Date.now();
  });
  return events;
}


Фрагмент з файлу db.js – геопросторовий запит до катастроф
Цей код демонструє, як за допомогою PostGIS можна отримувати дані про катастрофи, що знаходяться у певному радіусі від заданих координат.
const getDisastersInRadius = (lat, lng, radius) =>
  pool.query(
    `SELECT *, ST_X(location::geometry) AS lng, ST_Y(location::geometry) AS lat 
     FROM disasters 
     WHERE ST_DWithin(location::geography, ST_SetSRID(ST_MakePoint($1, $2), 4326), $3)`,
    [lng, lat, radius]
  );





2.2 Адміністрування серверної частини
Фрагмент з файлу routes/admin.js – управління ролями користувачів
Цей фрагмент показує, як адміністратор може отримувати список користувачів та оновлювати їх ролі. Маршрути захищені middleware, що перевіряє JWT-токен.
// Отримання списку всіх користувачів (тільки для адміністратора)
router.get('/users', authenticate, async (req, res) => {
  try {
    const users = await db.getUsers();
    res.json(users.rows);
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: "Internal server error" });
  }
});


// Оновлення ролі користувача
router.put('/user/:id/role', authenticate, async (req, res) => {
  try {
    const userId = req.params.id;
    const { role } = req.body;
    await db.updateUserRole(userId, role);
    res.json({ message: "User role updated successfully" });
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: "Internal server error" });
  }
});




3. Графічні ілюстрації (UML діаграми)
3.1 UML діаграма діяльності (Activity Diagram) для серверної частини
Нижче наведено UML-діаграму діяльності, що ілюструє послідовність обробки запиту на сервері:
  


3.2 UML діаграма взаємодії (Sequence Diagram) для серверної частини
Нижче наведено UML-діаграму взаємодії, що демонструє послідовність обміну повідомленнями між основними компонентами:
  

________________


Висновок
Запропоноване рішення GeoGuard Pro реалізовано з використанням сучасних технологій та бібліотек для створення інтерактивної системи моніторингу катастроф. Інженерні рішення враховують:
               * Ефективну обробку та агрегацію даних із зовнішніх джерел.
               * Використання геопросторових можливостей бази даних для аналізу місцезнаходження катастроф.
               * Забезпечення безпеки та управління користувачами через аутентифікацію та адміністративні маршрути.
               * Інтеграцію з клієнтською частиною для реального часу відображення даних.
Наведені фрагменти коду та UML-діаграми ілюструють ключові моменти бізнес-логіки та адміністрування серверної частини, що сприяє підтримці масштабованості та надійності системи.


Посилання на репозиторій GitHub: https://github.com/NureNikitenkoNikita/arkpz-pzpi-22-6-nikitenko-nikita