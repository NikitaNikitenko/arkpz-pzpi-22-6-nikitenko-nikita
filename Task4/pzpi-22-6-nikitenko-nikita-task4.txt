ЛАБОРАТОРНА РОБОТА №4. 




 РОЗРОБКА IoT КЛІЄНТА 
(БІЗНЕС-ЛОГІКИ ТА ФУНКЦІЙ НАЛАШТУВАННЯ)



Підготував 
ст. Нікітенко Н.Ю 
гр. ПЗПІ-22-6 


Перевірив роботу: 
Сокорчук І.П 




  1. Текстовий опис інженерних рішень


  Архітектура та призначення IoT‑клієнта


 IoT‑клієнт  у системі GeoGuard Pro відповідає за збирання, первинну обробку та передачу даних з датчиків, які моніторять різноманітні параметри (наприклад, сейсмічну активність, рівень води, температуру, вологість). Основні завдання IoT‑клієнта:


-  Збирання даних з сенсорів.   
  Періодичне зчитування значень із вбудованих або підключених датчиків (наприклад, через HTTP‑запити або WebSocket‑з’єднання).


-  Математична обробка та аналіз.   
  Реалізація бізнес‑логіки, що включає:
  - Обчислення середніх значень за певний період для зменшення впливу шуму.
  - Фільтрацію сигналів та виявлення аномальних значень (наприклад, перевищення порогових значень сейсмічної активності чи рівня води).
  - Генерацію сповіщень у разі виявлення критичних показників.


-  Передача даних на сервер.   
  Після обробки даних IoT‑клієнт формує пакет для відправки на сервер для подальшої агрегації, збереження в базі даних та аналізу в режимі реального часу.


-  Налаштування параметрів роботи.   
  За допомогою окремого модуля конфігурації можна задати інтервали зчитування, порогові значення для кожного типу датчиків та адресу серверної частини для передачі даних.


  Основні інженерні рішення


1.  Бізнес логіка математичної обробки даних: 
   -  Агрегація даних.   
     Зібрані з сенсорів значення групуються за типом. Реалізовано функцію, яка розраховує середнє значення для кожного типу датчика, що дозволяє зменшити вплив короткочасних коливань.
     
   -  Виявлення аномалій.   
     Порівняння отриманих значень із заданими пороговими значеннями (конфігурованими в IoT‑клієнті). Якщо виміряне значення перевищує порогове, генерується повідомлення (наприклад, для подальшого сповіщення або логування).


2.  Налаштування IoT‑клієнта: 
   -  Конфігураційний модуль.   
     Для централізованого налаштування параметрів роботи (інтервал зчитування, URL серверної частини, порогові значення для різних датчиків) створено конфігураційний файл або об’єкт, що дозволяє легко змінювати параметри без редагування бізнес‑логіки.
     
   -  Модуль керування параметрами.   
     Реалізовано функції зчитування та застосування налаштувань із локального сховища (наприклад, localStorage для веб‑клієнтів або файлу конфігурації для пристроїв IoT).




  2. Фрагменти програмного коду


  2.1 Бізнес логіка IoT‑клієнта


Нижче наведено приклад коду на JavaScript, що виконує математичну обробку даних сенсорів: розрахунок середніх значень та виявлення аномалій.


```javascript
// Функція обчислення середніх значень для кожного типу сенсорних даних
function calculateAverages(sensorData) {
  // sensorData - масив об'єктів { type: 'seismic'|'water'|..., value: числове значення }
  const aggregates = {};
  
  sensorData.forEach(reading => {
    if (!aggregates[reading.type]) {
      aggregates[reading.type] = { total: 0, count: 0 };
    }
    aggregates[reading.type].total += parseFloat(reading.value);
    aggregates[reading.type].count += 1;
  });
  
  const averages = {};
  for (const type in aggregates) {
    averages[type] = aggregates[type].total / aggregates[type].count;
  }
  
  return averages;
}


// Функція виявлення аномалій порівнянням з пороговими значеннями
function detectAnomalies(sensorData, thresholds) {
  // thresholds - об'єкт, наприклад: { seismic: 4.0, water: 3.5, temperature: 50 }
  const anomalies = [];
  
  sensorData.forEach(reading => {
    if (thresholds[reading.type] && parseFloat(reading.value) > thresholds[reading.type]) {
      anomalies.push({
        type: reading.type,
        value: reading.value,
        threshold: thresholds[reading.type]
      });
    }
  });
  
  return anomalies;
}


// Приклад використання:
const sensorData = [
  { type: 'seismic', value: 4.5 },
  { type: 'seismic', value: 3.8 },
  { type: 'water', value: 3.7 },
  { type: 'water', value: 3.2 },
  { type: 'temperature', value: 45 },
  { type: 'temperature', value: 55 }
];


const thresholds = {
  seismic: 4.0,
  water: 3.5,
  temperature: 50
};


const averages = calculateAverages(sensorData);
console.log("Середні значення:", averages);


const anomalies = detectAnomalies(sensorData, thresholds);
console.log("Виявлені аномалії:", anomalies);
```


  2.2 Налаштування IoT‑клієнта


Нижче наведено приклад конфігураційного модуля, що містить основні налаштування для IoT‑клієнта:


```javascript
// config.js - конфігурація IoT клієнта
const config = {
  samplingInterval: 5000, // Інтервал зчитування даних у мілісекундах
  serverEndpoint: 'http://localhost:3000/api/sensors', // URL серверної частини для передачі даних
  thresholds: {
    seismic: 4.0,
    water: 3.5,
    temperature: 50,
    humidity: 80
  },
  sensorTypes: ['seismic', 'water', 'temperature', 'humidity']
};


module.exports = config;
```


Ці налаштування використовуються як у бізнес‑логіці (для виявлення аномалій), так і для керування циклом зчитування даних сенсорів.




  3. Графічні ілюстрації (UML діаграми)


  3.1 UML діаграма прецедентів IoT‑клієнта





3.2 UML діаграма діяльності IoT‑клієнта


  



  Висновок


Запропоноване рішення IoT‑клієнта охоплює як математичну обробку предметно‑орієнтованих даних (обчислення середніх значень, виявлення аномалій), так і налаштування параметрів роботи пристрою через централізований конфігураційний модуль. 
UML діаграми ілюструють основні прецеденти використання (збір даних, обробка, виявлення аномалій, передача даних та налаштування) та послідовність дій у циклі роботи IoT‑клієнта. Це дозволяє забезпечити гнучкість, масштабованість та надійність системи при подальшій інтеграції з іншими компонентами GeoGuard Pro.


Посилання на репозиторій GitHub: https://github.com/NureNikitenkoNikita/arkpz-pzpi-22-6-nikitenko-nikita