ПРАКТИЧНА РОБОТА №1. 

CODE CONVENTION (Ruby)


Підготував 
ст. Нікітенко Н.Ю 
гр. ПЗПІ-22-6 


Перевірив роботу: 
Сокорчук І.П 





CODE CONVENTION - Ruby




Вступ 

1. Стандартизація коду допомагає команді працювати ефективніше. 
2. Чіткі правила забезпечують читабельність та легкість підтримки. 
3. Приклади: зменшення часу на рев'ю та швидке виявлення помилок.


Структура коду

Організація проєкту: розбиття на логічні модулі та файли. 
Приклад: папки models/, views/, controllers/. 
Коментарі допомагають розділити функціонал. 

# app/models/user.rb
class User
attr_accessor :name, :email


# Ініціалізація користувача
def initialize(name, email)
@name = name
@email = email
end
end


Форматування коду

Відступи: 2 пробіли для Ruby, ліміт 80-100 символів в рядку. 
Однорідність у вирівнюванні блоків та методів. 
Приклади стилів: Allman vs K&R. 


Приклад відступів: 
def greet(user)
if user.logged_in?
puts "BiTaEMo, #{user.name}!"
else
puts "Будь ласка, увійдіть."
end
end


Іменування
Використовуйте snake_case для змінних/методів, CamelCase для класів.
Імена мають бути зрозумілими, лаконічними та унікальними.
Уникайте "магічних" чисел – застосовуйте константи


MAX ATTEMPTS = 5


class UserAccount
def initialize(name)
@name = name
@attempts = 0
end
end




Коментарі

Коментарі пояснюють чому певне рішення було прийняте, а не лише що робить код. Використовуйте їх для опису нестандартних рішень. 
Пишіть самодокументований код, щоб мінімізувати зайві коментарі. 


# Перевірка email за допомогою регулярного виразу
def valid_email? (email)
!! (email =~ /\A[\w+\ -. ]+@[a-z\d\ -. ]+\.[a-z]+\z/i)
end




Документування коду

Використовуйте YARD для генерації документації.
Опис параметрів, повертаних значень та приклади використання поруч із кодом.
Документація має бути завжди актуальною.


Приклад YARD:

# @param [String] name Iм'я користувача
# @param [String] email Email KopNcTyBaya
# @return [User] Новий об'єкт користувача
def create_user(name, email)
User.new(name, email)
end






Конвенції стилю для Ruby

Ruby – мінімалістичний
Використовуйте інструменти для перевірки стилю: RuboCop (Ruby)
Єдність стилю сприяє легкому супроводу проекту.


Кодування на основі тестування (TDD)

Пишіть тести до реалізації функціоналу.
 TDD допомагає виявляти помилки на ранніх етапах розробки. 
Інструменти: RSpec, Minitest для Ruby. Приклад тесту (RSpec): 


require 'rspec'
require_relative 'user'


RSpec.describe User do
it 'створює корисув' email' do
user = User.new('HikiTa', 'nikita@example.com'
expect(user.name).to eq('HikiTa')
expect(user.email).to eq('nikita@example.com'
end
end




Інструменти автоматизації

Git Hooks для перевірки якості коду перед коммітом. 
CI/CD для автоматичного тестування та деплойменту. 
Статичний аналіз коду (SonarQube, Codacy) для виявлення недоліків. 






Приклади оформлення коду

Добре структурований код полегшує рев'ю та підвищує продуктивність.


Гарний код: 
def calculate difference(x, y)
if x > y
difference = x - y
else
difference = y - x
end
difference
end




Поганий код: 
def calc(x,y)
if(x > y) then z = x - y else z = y - x end; z
end




Гарний код: 
def calculate area(radius
Math: :PI
end


radius ** 2




Поганий код: 
def calc(x)
a = 3.14
return a * x * x
end


Висновки 
Чіткі правила кодування підвищують якість проекту. 
Сучасні інструменти полегшують роботу команди. 
Практикуйте TDD та документуйте код для кращого розуміння


GitHub репозиторій: https://github.com/NureNikitenkoNikita/arkpz-pzpi-22-6-nikitenko-nikita/tree/main
Посилання на YouTube: https://youtu.be/Toju40tbaN0